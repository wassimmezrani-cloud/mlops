---
# Kubernetes master node tasks (based on actual configuration)
- name: Install containerd.io
  apt:
    name: containerd.io
    state: present
    update_cache: true

- name: Create containerd configuration directory
  file:
    path: /etc/containerd
    state: directory
    mode: '0755'

- name: Generate containerd default configuration
  shell: containerd config default > /etc/containerd/config.toml
  args:
    creates: /etc/containerd/config.toml

- name: Configure containerd to use systemd cgroup
  lineinfile:
    path: /etc/containerd/config.toml
    regexp: '^\s*SystemdCgroup\s*='
    line: '            SystemdCgroup = true'
    backup: true

- name: Start and enable containerd
  systemd:
    name: containerd
    state: started
    enabled: true

- name: Add Kubernetes apt key
  apt_key:
    url: https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key
    state: present

- name: Add Kubernetes repository
  apt_repository:
    repo: "deb https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /"
    state: present
    filename: kubernetes

- name: Install specific Kubernetes components v1.31.4
  apt:
    name:
      - kubelet=1.31.4-1.1
      - kubeadm=1.31.4-1.1
      - kubectl=1.31.4-1.1
    state: present
    update_cache: true

- name: Hold Kubernetes packages
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
    - kubelet
    - kubeadm
    - kubectl

- name: Start and enable kubelet
  systemd:
    name: kubelet
    state: started
    enabled: true

- name: Initialize Kubernetes cluster (only on first master)
  command: >
    kubeadm init
    --apiserver-advertise-address={{ ansible_host }}
    --pod-network-cidr={{ pod_network_cidr }}
    --service-cidr={{ service_cidr }}
    --control-plane-endpoint={{ k8s_control_plane_endpoint }}
    --upload-certs
    --kubernetes-version=v{{ k8s_version }}
  when: inventory_hostname == groups['k8s-masters'][0]
  register: kubeadm_init
  ignore_errors: true

- name: Generate join token for cluster
  command: kubeadm token create --print-join-command
  when: inventory_hostname == groups['k8s-masters'][0]
  register: join_command
  ignore_errors: true

- name: Generate certificate key for control plane
  command: kubeadm init phase upload-certs --upload-certs
  when: inventory_hostname == groups['k8s-masters'][0]
  register: certificate_key_output
  ignore_errors: true

- name: Extract certificate key
  set_fact:
    certificate_key: "{{ certificate_key_output.stdout_lines[-1] }}"
  when: 
    - inventory_hostname == groups['k8s-masters'][0] 
    - certificate_key_output.stdout_lines is defined
    - certificate_key_output.stdout_lines | length > 0

- name: Extract join command components
  set_fact:
    kubeadm_token: "{{ join_command.stdout.split('--token ')[1].split(' ')[0] }}"
    ca_cert_hash: "{{ join_command.stdout.split('--discovery-token-ca-cert-hash ')[1].split(' ')[0] }}"
  when: 
    - inventory_hostname == groups['k8s-masters'][0] 
    - join_command.stdout is defined
    - "'--token ' in join_command.stdout"
    - "'--discovery-token-ca-cert-hash ' in join_command.stdout"

- name: Save join information for future reference
  copy:
    content: |
      # Kubernetes Cluster Join Information
      # Generated on: {{ ansible_date_time.date }} {{ ansible_date_time.time }}
      
      # Control Plane Endpoint
      CONTROL_PLANE_ENDPOINT={{ k8s_control_plane_endpoint }}
      
      # Join Token (expires in 24 hours by default)
      KUBEADM_TOKEN={{ kubeadm_token | default('FAILED_TO_GENERATE') }}
      
      # CA Certificate Hash
      CA_CERT_HASH={{ ca_cert_hash | default('FAILED_TO_GENERATE') }}
      
      # Certificate Key (for control plane nodes)
      CERTIFICATE_KEY={{ certificate_key | default('FAILED_TO_GENERATE') }}
      
      # Worker Join Command:
      # kubeadm join {{ k8s_control_plane_endpoint }} --token {{ kubeadm_token | default('TOKEN') }} --discovery-token-ca-cert-hash {{ ca_cert_hash | default('HASH') }}
      
      # Master Join Command:
      # kubeadm join {{ k8s_control_plane_endpoint }} --token {{ kubeadm_token | default('TOKEN') }} --discovery-token-ca-cert-hash {{ ca_cert_hash | default('HASH') }} --control-plane --certificate-key {{ certificate_key | default('CERT_KEY') }}
    dest: "/tmp/kubeadm-join-info.txt"
    mode: '0600'
  when: inventory_hostname == groups['k8s-masters'][0]

- name: Join additional master nodes to cluster
  command: >
    kubeadm join {{ k8s_control_plane_endpoint }}
    --token {{ hostvars[groups['k8s-masters'][0]]['kubeadm_token'] }}
    --discovery-token-ca-cert-hash {{ hostvars[groups['k8s-masters'][0]]['ca_cert_hash'] }}
    --control-plane
    --certificate-key {{ hostvars[groups['k8s-masters'][0]]['certificate_key'] }}
    --apiserver-advertise-address={{ ansible_host }}
  when: inventory_hostname != groups['k8s-masters'][0]
  register: kubeadm_join_master
  ignore_errors: true

- name: Create .kube directory for user
  file:
    path: /home/{{ ansible_user }}/.kube
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

- name: Copy admin.conf to user's kube config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /home/{{ ansible_user }}/.kube/config
    remote_src: true
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'
  when: inventory_hostname == groups['k8s-masters'][0]

- name: Install Flannel CNI (only on first master)
  become_user: "{{ ansible_user }}"
  command: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
  when: inventory_hostname == groups['k8s-masters'][0]
  ignore_errors: true

- name: Install NGINX Ingress Controller (only on first master)
  become_user: "{{ ansible_user }}"
  command: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.1/deploy/static/provider/baremetal/deploy.yaml
  when: inventory_hostname == groups['k8s-masters'][0]
  ignore_errors: true

- name: Wait for ingress controller to be ready
  become_user: "{{ ansible_user }}"
  command: kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=300s
  when: inventory_hostname == groups['k8s-masters'][0]
  ignore_errors: true

# ML-Kubernetes-Scheduler Makefile
# Automation pour build, test, deploy et operations

.PHONY: help build test deploy clean setup install-deps verify-deployment

# Variables
PROJECT_NAME := ml-kubernetes-scheduler
NAMESPACE := ml-scheduler
VERSION ?= v1.0.0
REGISTRY ?= registry.hydatis.tn
GO_VERSION := 1.21
PYTHON_VERSION := 3.9

# Colors pour output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

##@ Help
help: ## Afficher cette aide
	@awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make \033[36m<target>\033[0m\n"} /^[a-zA-Z_0-9-]+:.*?##/ { printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)

##@ Setup & Installation
install-deps: ## Installer toutes les d√©pendances (Go, Python, K8s tools)
	@echo "$(GREEN)üì¶ Installation des d√©pendances...$(NC)"
	@echo "$(BLUE)üîß V√©rification Go $(GO_VERSION)...$(NC)"
	@go version || (echo "$(RED)‚ùå Go non install√©$(NC)" && exit 1)
	@echo "$(BLUE)üêç V√©rification Python $(PYTHON_VERSION)...$(NC)"
	@python3 --version || (echo "$(RED)‚ùå Python3 non install√©$(NC)" && exit 1)
	@echo "$(BLUE)‚ò∏Ô∏è V√©rification kubectl...$(NC)"
	@kubectl version --client || (echo "$(RED)‚ùå kubectl non install√©$(NC)" && exit 1)
	@echo "$(BLUE)üì• Installation d√©pendances Go...$(NC)"
	@go mod download
	@go mod tidy
	@echo "$(BLUE)üì• Installation d√©pendances Python ML Services...$(NC)"
	@pip3 install -r ml-services/xgboost-predictor/requirements.txt
	@pip3 install -r ml-services/qlearning-optimizer/requirements.txt
	@pip3 install -r ml-services/isolation-detector/requirements.txt
	@echo "$(GREEN)‚úÖ Toutes les d√©pendances install√©es avec succ√®s !$(NC)"

setup-env: ## Configurer l'environnement de d√©veloppement
	@echo "$(GREEN)üõ†Ô∏è Configuration environnement d√©veloppement...$(NC)"
	@echo "$(BLUE)üìÅ Cr√©ation namespace Kubernetes...$(NC)"
	@kubectl create namespace $(NAMESPACE) || echo "Namespace $(NAMESPACE) d√©j√† existant"
	@echo "$(BLUE)üè∑Ô∏è Labeling namespace...$(NC)"
	@kubectl label namespace $(NAMESPACE) name=$(NAMESPACE) --overwrite
	@echo "$(BLUE)‚öôÔ∏è Application configurations de base...$(NC)"
	@kubectl apply -f deployments/kubernetes/namespace.yaml
	@kubectl apply -f config/environments/development.yaml
	@echo "$(GREEN)‚úÖ Environnement configur√© avec succ√®s !$(NC)"

##@ Build & Development
build: ## Builder tous les composants
	@echo "$(GREEN)üî® Build de tous les composants...$(NC)"
	@$(MAKE) build-scheduler
	@$(MAKE) build-ml-services
	@echo "$(GREEN)‚úÖ Build termin√© avec succ√®s !$(NC)"

build-scheduler: ## Builder le scheduler Go
	@echo "$(BLUE)üî® Build du ML-Scheduler (Go)...$(NC)"
	@go build -o bin/ml-scheduler ./cmd/scheduler/
	@go build -o bin/data-collector ./cmd/data-collector/
	@go build -o bin/metrics-exporter ./cmd/metrics-exporter/
	@echo "$(GREEN)‚úÖ Scheduler Go build√© avec succ√®s !$(NC)"

build-ml-services: ## Builder les services ML Python
	@echo "$(BLUE)üß† Build des services ML (Python)...$(NC)"
	@docker build -t $(REGISTRY)/xgboost-predictor:$(VERSION) ./ml-services/xgboost-predictor/
	@docker build -t $(REGISTRY)/qlearning-optimizer:$(VERSION) ./ml-services/qlearning-optimizer/
	@docker build -t $(REGISTRY)/isolation-detector:$(VERSION) ./ml-services/isolation-detector/
	@echo "$(GREEN)‚úÖ Services ML build√©s avec succ√®s !$(NC)"

build-docker: ## Builder toutes les images Docker
	@echo "$(BLUE)üê≥ Build des images Docker...$(NC)"
	@docker build -t $(REGISTRY)/$(PROJECT_NAME):$(VERSION) ./cmd/scheduler/
	@$(MAKE) build-ml-services
	@echo "$(GREEN)‚úÖ Images Docker build√©es avec succ√®s !$(NC)"

##@ Testing
test: ## Ex√©cuter tous les tests
	@echo "$(GREEN)üß™ Ex√©cution de tous les tests...$(NC)"
	@$(MAKE) test-unit
	@$(MAKE) test-integration
	@$(MAKE) test-e2e
	@echo "$(GREEN)‚úÖ Tous les tests pass√©s avec succ√®s !$(NC)"

test-unit: ## Tests unitaires Go et Python
	@echo "$(BLUE)üî¨ Tests unitaires...$(NC)"
	@echo "$(YELLOW)Go Tests:$(NC)"
	@go test -v -cover ./pkg/... ./cmd/...
	@echo "$(YELLOW)Python Tests:$(NC)"
	@cd ml-services/xgboost-predictor && python -m pytest tests/ -v
	@cd ml-services/qlearning-optimizer && python -m pytest tests/ -v
	@cd ml-services/isolation-detector && python -m pytest tests/ -v

test-integration: ## Tests d'int√©gration
	@echo "$(BLUE)üîó Tests d'int√©gration...$(NC)"
	@go test -v -tags=integration ./tests/integration/...

test-e2e: ## Tests end-to-end
	@echo "$(BLUE)üéØ Tests end-to-end...$(NC)"
	@kubectl apply -f tests/e2e/test-pods.yaml
	@go test -v -tags=e2e ./tests/e2e/...
	@kubectl delete -f tests/e2e/test-pods.yaml

test-load: ## Tests de charge
	@echo "$(BLUE)‚ö° Tests de charge...$(NC)"
	@go test -v -tags=load ./tests/load/...

test-chaos: ## Tests chaos engineering
	@echo "$(BLUE)üí• Tests chaos engineering...$(NC)"
	@kubectl apply -f tests/chaos/
	@sleep 30
	@kubectl delete -f tests/chaos/

##@ Deployment
deploy: ## D√©ployer le ML-Scheduler complet
	@echo "$(GREEN)üöÄ D√©ploiement ML-Scheduler...$(NC)"
	@$(MAKE) deploy-storage
	@$(MAKE) deploy-scheduler
	@$(MAKE) deploy-ml-services
	@$(MAKE) deploy-monitoring
	@echo "$(GREEN)‚úÖ D√©ploiement termin√© avec succ√®s !$(NC)"

deploy-storage: ## D√©ployer le stockage Longhorn
	@echo "$(BLUE)üíæ D√©ploiement stockage Longhorn...$(NC)"
	@kubectl apply -f storage/longhorn/
	@kubectl wait --for=condition=Ready pod -l app=longhorn-manager -n longhorn-system --timeout=300s

deploy-scheduler: ## D√©ployer le scheduler principal
	@echo "$(BLUE)‚öôÔ∏è D√©ploiement ML-Scheduler...$(NC)"
	@kubectl apply -f deployments/kubernetes/scheduler/
	@kubectl rollout status deployment/ml-scheduler -n $(NAMESPACE)

deploy-ml-services: ## D√©ployer les services ML
	@echo "$(BLUE)üß† D√©ploiement services ML...$(NC)"
	@kubectl apply -f deployments/kubernetes/ml-services/
	@kubectl apply -f deployments/kserve/
	@kubectl wait --for=condition=Ready pod -l app=ml-services -n $(NAMESPACE) --timeout=300s

deploy-monitoring: ## D√©ployer le monitoring
	@echo "$(BLUE)üìä D√©ploiement monitoring...$(NC)"
	@kubectl apply -f deployments/kubernetes/monitoring/
	@kubectl wait --for=condition=Ready pod -l app=prometheus -n monitoring --timeout=300s

##@ Operations
verify-deployment: ## V√©rifier le d√©ploiement
	@echo "$(GREEN)‚úÖ V√©rification du d√©ploiement...$(NC)"
	@echo "$(BLUE)üìä √âtat des pods:$(NC)"
	@kubectl get pods -n $(NAMESPACE)
	@echo "$(BLUE)üåê Services:$(NC)"
	@kubectl get services -n $(NAMESPACE)
	@echo "$(BLUE)üíæ Volumes persistants:$(NC)"
	@kubectl get pv | grep $(NAMESPACE)
	@echo "$(BLUE)üìà M√©triques Prometheus:$(NC)"
	@kubectl get servicemonitor -n $(NAMESPACE)
	@echo "$(BLUE)üß† KServe InferenceServices:$(NC)"
	@kubectl get inferenceservice -n $(NAMESPACE)

logs: ## Afficher les logs du scheduler
	@echo "$(BLUE)üìã Logs ML-Scheduler:$(NC)"
	@kubectl logs -f deployment/ml-scheduler -n $(NAMESPACE)

logs-ml: ## Afficher les logs des services ML
	@echo "$(BLUE)üìã Logs Services ML:$(NC)"
	@kubectl logs -f deployment/xgboost-predictor -n $(NAMESPACE) &
	@kubectl logs -f deployment/qlearning-optimizer -n $(NAMESPACE) &
	@kubectl logs -f deployment/isolation-detector -n $(NAMESPACE) &

status: ## Afficher le statut complet
	@echo "$(GREEN)üìä Statut ML-Scheduler HYDATIS$(NC)"
	@echo "$(BLUE)Cluster Info:$(NC)"
	@kubectl cluster-info
	@echo "$(BLUE)Nodes:$(NC)"
	@kubectl get nodes
	@echo "$(BLUE)ML-Scheduler Namespace:$(NC)"
	@kubectl get all -n $(NAMESPACE)
	@echo "$(BLUE)Kubeflow Status:$(NC)"
	@kubectl get pods -n kubeflow | head -10
	@echo "$(BLUE)Longhorn Status:$(NC)"
	@kubectl get pods -n longhorn-system | head -5
	@echo "$(BLUE)Monitoring Status:$(NC)"
	@kubectl get pods -n monitoring | head -5

##@ Monitoring & Debugging
monitor: ## Ouvrir les dashboards de monitoring
	@echo "$(GREEN)üìä Ouverture dashboards monitoring...$(NC)"
	@echo "$(BLUE)Grafana Dashboard:$(NC) http://localhost:3000"
	@kubectl port-forward -n monitoring svc/grafana 3000:3000 &
	@echo "$(BLUE)Prometheus:$(NC) http://localhost:9090"
	@kubectl port-forward -n monitoring svc/prometheus 9090:9090 &
	@echo "$(BLUE)Kubeflow Dashboard:$(NC) http://localhost:8080"
	@kubectl port-forward -n kubeflow svc/kubeflow-dashboard 8080:8080 &
	@echo "$(YELLOW)Dashboards ouverts ! Ctrl+C pour fermer$(NC)"

debug-scheduler: ## Debug du scheduler
	@echo "$(BLUE)üêõ Debug ML-Scheduler...$(NC)"
	@kubectl describe pod -l app=ml-scheduler -n $(NAMESPACE)
	@kubectl logs --tail=100 -l app=ml-scheduler -n $(NAMESPACE)

debug-ml-services: ## Debug des services ML
	@echo "$(BLUE)üß† Debug Services ML...$(NC)"
	@kubectl describe pod -l app=ml-services -n $(NAMESPACE)
	@kubectl logs --tail=50 -l app=xgboost-predictor -n $(NAMESPACE)
	@kubectl logs --tail=50 -l app=qlearning-optimizer -n $(NAMESPACE)
	@kubectl logs --tail=50 -l app=isolation-detector -n $(NAMESPACE)

##@ Data Management
collect-data: ## Collecter les donn√©es historiques
	@echo "$(BLUE)üìä Collecte donn√©es historiques...$(NC)"
	@./scripts/data/collect-historical-data.sh

process-features: ## Traiter les features pour ML
	@echo "$(BLUE)‚öôÔ∏è Traitement features ML...$(NC)"
	@./scripts/data/process-features.sh

backup: ## Backup des donn√©es et configuration
	@echo "$(BLUE)üíæ Backup donn√©es et config...$(NC)"
	@./scripts/data/backup-data.sh
	@./scripts/maintenance/backup-config.sh

restore: ## Restore des donn√©es
	@echo "$(BLUE)‚ôªÔ∏è Restore donn√©es...$(NC)"
	@./scripts/data/restore-data.sh

##@ Kubeflow Operations
kubeflow-pipelines: ## Ex√©cuter les pipelines Kubeflow
	@echo "$(BLUE)üîÑ Ex√©cution pipelines Kubeflow...$(NC)"
	@python kubeflow/pipelines/training-pipeline.py

katib-tuning: ## Lancer hyperparameter tuning avec Katib
	@echo "$(BLUE)üéØ Hyperparameter tuning Katib...$(NC)"
	@kubectl apply -f kubeflow/katib/xgboost-tuning.yaml
	@kubectl apply -f kubeflow/katib/qlearning-tuning.yaml
	@kubectl apply -f kubeflow/katib/isolation-tuning.yaml

jupyter: ## Ouvrir Jupyter Notebooks
	@echo "$(BLUE)üìì Ouverture Jupyter Notebooks...$(NC)"
	@kubectl port-forward -n kubeflow svc/jupyter-web-app-service 8888:80

mlflow: ## Ouvrir MLflow UI
	@echo "$(BLUE)üìà Ouverture MLflow UI...$(NC)"
	@kubectl port-forward -n kubeflow svc/mlflow-server 5000:5000

##@ Maintenance
clean: ## Nettoyer les ressources
	@echo "$(YELLOW)üßπ Nettoyage des ressources...$(NC)"
	@docker system prune -f
	@go clean -cache
	@kubectl delete pods --field-selector=status.phase=Succeeded -n $(NAMESPACE)

uninstall: ## D√©sinstaller compl√®tement
	@echo "$(RED)üóëÔ∏è D√©sinstallation ML-Scheduler...$(NC)"
	@kubectl delete namespace $(NAMESPACE)
	@kubectl delete -f deployments/kubernetes/monitoring/
	@docker rmi $(REGISTRY)/$(PROJECT_NAME):$(VERSION) || true

update: ## Mettre √† jour le d√©ploiement
	@echo "$(BLUE)üîÑ Mise √† jour d√©ploiement...$(NC)"
	@$(MAKE) build
	@kubectl rollout restart deployment/ml-scheduler -n $(NAMESPACE)
	@kubectl rollout restart deployment/xgboost-predictor -n $(NAMESPACE)
	@kubectl rollout restart deployment/qlearning-optimizer -n $(NAMESPACE)
	@kubectl rollout restart deployment/isolation-detector -n $(NAMESPACE)

##@ Performance Testing
performance-test: ## Tests de performance complets
	@echo "$(BLUE)‚ö° Tests de performance...$(NC)"
	@./scripts/monitoring/performance-test.sh

stress-test: ## Tests de stress du cluster
	@echo "$(BLUE)üí™ Tests de stress...$(NC)"
	@./scripts/monitoring/stress-test.sh

benchmark: ## Benchmark du scheduler vs default
	@echo "$(BLUE)üèÜ Benchmark ML-Scheduler vs Default...$(NC)"
	@go test -v -bench=. ./tests/e2e/

##@ Quick Commands
quick-status: ## Statut rapide
	@kubectl get pods -n $(NAMESPACE) -o wide

quick-logs: ## Logs rapides scheduler
	@kubectl logs --tail=20 -l app=ml-scheduler -n $(NAMESPACE)

quick-restart: ## Restart rapide scheduler
	@kubectl rollout restart deployment/ml-scheduler -n $(NAMESPACE)

##@ Development Helpers
dev-setup: ## Setup d√©veloppement complet
	@$(MAKE) install-deps
	@$(MAKE) setup-env
	@$(MAKE) build
	@echo "$(GREEN)üéâ Environnement d√©veloppement pr√™t !$(NC)"

dev-deploy: ## D√©ploiement d√©veloppement rapide
	@$(MAKE) build-scheduler
	@kubectl apply -f deployments/kubernetes/scheduler/
	@kubectl rollout status deployment/ml-scheduler -n $(NAMESPACE)

dev-test: ## Tests d√©veloppement rapides
	@$(MAKE) test-unit
	@$(MAKE) test-integration

##@ Information
version: ## Afficher la version
	@echo "$(GREEN)ML-Scheduler Version: $(VERSION)$(NC)"
	@echo "$(BLUE)Go Version: $(shell go version)$(NC)"
	@echo "$(BLUE)Kubectl Version: $(shell kubectl version --client --short)$(NC)"
	@echo "$(BLUE)Docker Version: $(shell docker --version)$(NC)"

info: ## Informations syst√®me
	@echo "$(GREEN)üèóÔ∏è ML-Kubernetes-Scheduler - HYDATIS$(NC)"
	@echo "$(BLUE)üìã Informations Syst√®me:$(NC)"
	@echo "  Project: $(PROJECT_NAME)"
	@echo "  Version: $(VERSION)"
	@echo "  Namespace: $(NAMESPACE)"
	@echo "  Registry: $(REGISTRY)"
	@echo "  Go Version: $(GO_VERSION)"
	@echo "  Python Version: $(PYTHON_VERSION)"
	@echo ""
	@echo "$(GREEN)üéØ Mission: Transformer HYDATIS de SPOF vers HA Cluster$(NC)"
	@echo "$(GREEN)üß† Algorithmes: XGBoost + Q-Learning + Isolation Forest$(NC)"
	@echo "$(GREEN)‚ö° Impact: 99.7% availability, 15x capacity, 1,428% ROI$(NC)"

# Default target
.DEFAULT_GOAL := help

# Simplified Katib Setup for ML-Scheduler Hyperparameter Optimization

apiVersion: v1
kind: Namespace
metadata:
  name: katib-system

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: katib-config
  namespace: katib-system
data:
  katib-config.yaml: |
    runtime:
      metricsCollectors:
      - kind: StdOut
        image: docker.io/kubeflowkatib/file-metrics-collector:v0.17.0
    suggestion:
      - algorithmName: random
        image: docker.io/kubeflowkatib/suggestion-hyperopt:v0.17.0
      - algorithmName: tpe
        image: docker.io/kubeflowkatib/suggestion-hyperopt:v0.17.0
      - algorithmName: bayesianoptimization
        image: docker.io/kubeflowkatib/suggestion-skopt:v0.17.0

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: katib-controller
  namespace: katib-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: katib-controller
  template:
    metadata:
      labels:
        app: katib-controller
    spec:
      serviceAccountName: default
      containers:
      - name: katib-controller
        image: docker.io/kubeflowkatib/katib-controller:v0.17.0
        ports:
        - containerPort: 8080
        env:
        - name: KATIB_CORE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - mountPath: /opt/katib/conf
          name: katib-config
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1Gi
      volumes:
      - name: katib-config
        configMap:
          name: katib-config

---
apiVersion: v1
kind: Service
metadata:
  name: katib-controller
  namespace: katib-system
spec:
  selector:
    app: katib-controller
  ports:
  - port: 8080
    targetPort: 8080

---
# Simple experiment to test Katib functionality
apiVersion: kubeflow.org/v1beta1
kind: Experiment
metadata:
  name: ml-scheduler-simple-test
  namespace: katib-system
spec:
  algorithm:
    algorithmName: random
  objective:
    type: maximize
    objectiveMetricName: accuracy
  parameters:
  - name: learning-rate
    parameterType: double
    feasibleSpace:
      min: "0.01"
      max: "0.1"
  - name: batch-size
    parameterType: int
    feasibleSpace:
      min: "16"
      max: "128"
  maxTrialCount: 5
  parallelTrialCount: 2
  trialTemplate:
    primaryContainerName: training-container
    trialSpec:
      apiVersion: batch/v1
      kind: Job
      spec:
        template:
          spec:
            restartPolicy: Never
            containers:
            - name: training-container
              image: python:3.9
              command:
              - "python3"
              - "-c"
              args:
              - |
                import random
                import sys
                learning_rate = float(sys.argv[1])
                batch_size = int(sys.argv[2])
                # Simulate training
                accuracy = random.uniform(0.8, 0.95)
                print(f"accuracy={accuracy}")
              - "${trialParameters.learningRate}"
              - "${trialParameters.batchSize}"
              resources:
                requests:
                  cpu: 100m
                  memory: 128Mi
  metricsCollectorSpec:
    collector:
      kind: StdOut